{"uid":"a679aee5f20ec9ff","name":"testModifyPdschMcs[close-25]","fullName":"TestCase.phy.test_phy.TestPhy#testModifyPdschMcs","historyId":"796fd6b0e3b5c2f5db5654d01921c165","time":{"start":1674204440353,"stop":1674204482889,"duration":42536},"status":"broken","statusMessage":"FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ''","statusTrace":"self = <TestCase.phy.test_phy.TestPhy object at 0x00000198757DFD00>\nswitch = 'close', mcs = 25\n\n    @allure.story(\"支持PDSCH_调制解调方式配置\")\n    @pytest.mark.支持PDSCH_调制解调方式配置\n    @pytest.mark.parametrize(\"switch, mcs\",RUN_TESTCASE['支持PDSCH_调制解调方式配置'] if RUN_TESTCASE.get('支持PDSCH_调制解调方式配置') else [])\n    def testModifyPdschMcs(self, switch, mcs):\n        cpeIp = BASIC_DATA['cpe']['cpeSshIp']\n        cpeUser = BASIC_DATA['cpe']['cpeUsername']\n        cpePass = BASIC_DATA['cpe']['cpePassword']\n        serialNumberList=BASIC_DATA['gnb']['serialNumberList']\n        hmsObj = key_login_hms(BASIC_DATA['hms']['ip'])\n        logSavePath = BASIC_DATA['cpe']['ueLogSavePath']\n        ueLogBackup = BASIC_DATA['cpe']['ueLogBackup']\n        pdnSshIp = BASIC_DATA['pdn']['pdnSshIp']\n        pdnSshUser = BASIC_DATA['pdn']['pdnUsername']\n        pdnSshPass = BASIC_DATA['pdn']['pdnPassword']\n        nrPort = BASIC_DATA['flow']['nrPort']\n        spanTime = BASIC_DATA['flow']['spanTime']\n        cpePcIp = BASIC_DATA['flow']['cpePcIp']\n        iperfPath = BASIC_DATA['flow']['iperfLocalPath']\n        pdnIp = BASIC_DATA['pdn']['pdnIp']\n        enbDebugIp = BASIC_DATA['gnb']['debugIp']\n        pcIp = BASIC_DATA['flow']['localPcIp']\n        enbId, enbName = key_get_enb_info(hmsObj, serialNumberList)\n        cpe = key_cpe_login(cpeIp,cpeUser,cpePass)\n        pdn = key_pdn_login(pdnSshIp,pdnSshUser,pdnSshPass)\n        ueLogFilePath = ''\n        try:\n            with allure.step(key_get_time() +\": 确认支持PDSCH的调制解调方式,mcs值:\"+str(mcs)+'\\n'):\n                logging.info(key_get_time()+': confirm support PDSCH mcs config, mcs value:'+str(mcs))\n            #修改pdsch调度参数\n>           key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs)\n\n..\\TestCase\\phy\\test_phy.py:210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhmsObj = <BasicModel.hms.hms.HMS object at 0x00000198758AA580>, enbId = 4\nswitch = 'close', mcs = 25\n\n    def key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs=28):\n    \n        with allure.step(key_get_time() +\": 修改PDSCH下行调制解调参数,mcs值:\"+str(mcs)+'\\n'):\n            logging.info(key_get_time()+': modify PDSCH DL mcs, mcs value:'+str(mcs))\n            modifySwitchRes = DLScheduleService().modify_du_dl_amc_switch(hmsObj, enbId, switch)\n            if modifySwitchRes == True:\n                modifyMcsRes = DLScheduleService().modify_du_dl_mcs(hmsObj, enbId, mcs)\n                if modifyMcsRes == True:\n                    with allure.step(key_get_time() +\":PDSCH下行调制解调参数修改成功。\"):\n                        logging.info(key_get_time()+': PDSCH DL mcs modify success!')\n                else:\n                    with allure.step(key_get_time() +\":PDSCH下行调制解调参数修改失败。\"):\n                        logging.warning(key_get_time()+': PDSCH DL mcs modify failure!')\n>           assert modifyMcsRes == True,'修改PDSCH下行调制解调参数修改异常，请检查！'\nE           UnboundLocalError: local variable 'modifyMcsRes' referenced before assignment\n\n..\\UserKeywords\\hms\\PdcchManager.py:84: UnboundLocalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase.phy.test_phy.TestPhy object at 0x00000198757DFD00>\nswitch = 'close', mcs = 25\n\n    @allure.story(\"支持PDSCH_调制解调方式配置\")\n    @pytest.mark.支持PDSCH_调制解调方式配置\n    @pytest.mark.parametrize(\"switch, mcs\",RUN_TESTCASE['支持PDSCH_调制解调方式配置'] if RUN_TESTCASE.get('支持PDSCH_调制解调方式配置') else [])\n    def testModifyPdschMcs(self, switch, mcs):\n        cpeIp = BASIC_DATA['cpe']['cpeSshIp']\n        cpeUser = BASIC_DATA['cpe']['cpeUsername']\n        cpePass = BASIC_DATA['cpe']['cpePassword']\n        serialNumberList=BASIC_DATA['gnb']['serialNumberList']\n        hmsObj = key_login_hms(BASIC_DATA['hms']['ip'])\n        logSavePath = BASIC_DATA['cpe']['ueLogSavePath']\n        ueLogBackup = BASIC_DATA['cpe']['ueLogBackup']\n        pdnSshIp = BASIC_DATA['pdn']['pdnSshIp']\n        pdnSshUser = BASIC_DATA['pdn']['pdnUsername']\n        pdnSshPass = BASIC_DATA['pdn']['pdnPassword']\n        nrPort = BASIC_DATA['flow']['nrPort']\n        spanTime = BASIC_DATA['flow']['spanTime']\n        cpePcIp = BASIC_DATA['flow']['cpePcIp']\n        iperfPath = BASIC_DATA['flow']['iperfLocalPath']\n        pdnIp = BASIC_DATA['pdn']['pdnIp']\n        enbDebugIp = BASIC_DATA['gnb']['debugIp']\n        pcIp = BASIC_DATA['flow']['localPcIp']\n        enbId, enbName = key_get_enb_info(hmsObj, serialNumberList)\n        cpe = key_cpe_login(cpeIp,cpeUser,cpePass)\n        pdn = key_pdn_login(pdnSshIp,pdnSshUser,pdnSshPass)\n        ueLogFilePath = ''\n        try:\n            with allure.step(key_get_time() +\": 确认支持PDSCH的调制解调方式,mcs值:\"+str(mcs)+'\\n'):\n                logging.info(key_get_time()+': confirm support PDSCH mcs config, mcs value:'+str(mcs))\n            #修改pdsch调度参数\n            key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs)\n            #确认小区状态正常\n            key_confirm_cell_status(hmsObj, enbId, 'available')\n            dev_manager, qxdm_window, diagService = key_start_ue_log_trace()\n            #cpe接入小区，确认pdu建立成功\n            key_cpe_attach(cpe)\n            setupRes = key_confirm_pdu_setup_succ(cpe)\n            if setupRes == 'success':\n                key_wait(10)\n                key_dl_udp_nr_flow_test(cpe, pdn, cpePcIp, iperfPath, pdnIp, enbDebugIp, pcIp, monitorPort=nrPort, spanTime=spanTime)\n                ueLogFilePath = key_stop_ue_log_trace(dev_manager, qxdm_window, diagService, logSavePath)\n                mcsRes = key_pdsch_mcs_analyze(ueLogFilePath, mcs)\n            else:\n                logging.info(key_get_time()+': ue attach failure, please check!')\n            assert mcsRes == True, '参数校验失败，请检查！'\n        finally:\n            #cpe去接入小区\n            key_cpe_detach(cpe)\n            logging.info(key_get_time()+': move the log file to backup folder')\n            fileName = ueLogFilePath.split('\\\\')[-1]\n            if os.path.exists(ueLogBackup+'\\\\'+fileName):\n>               os.remove(ueLogFilePath)\nE               FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ''\n\n..\\TestCase\\phy\\test_phy.py:231: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ''","statusTrace":"self = <TestCase.phy.test_phy.TestPhy object at 0x00000198757DFD00>\nswitch = 'close', mcs = 25\n\n    @allure.story(\"支持PDSCH_调制解调方式配置\")\n    @pytest.mark.支持PDSCH_调制解调方式配置\n    @pytest.mark.parametrize(\"switch, mcs\",RUN_TESTCASE['支持PDSCH_调制解调方式配置'] if RUN_TESTCASE.get('支持PDSCH_调制解调方式配置') else [])\n    def testModifyPdschMcs(self, switch, mcs):\n        cpeIp = BASIC_DATA['cpe']['cpeSshIp']\n        cpeUser = BASIC_DATA['cpe']['cpeUsername']\n        cpePass = BASIC_DATA['cpe']['cpePassword']\n        serialNumberList=BASIC_DATA['gnb']['serialNumberList']\n        hmsObj = key_login_hms(BASIC_DATA['hms']['ip'])\n        logSavePath = BASIC_DATA['cpe']['ueLogSavePath']\n        ueLogBackup = BASIC_DATA['cpe']['ueLogBackup']\n        pdnSshIp = BASIC_DATA['pdn']['pdnSshIp']\n        pdnSshUser = BASIC_DATA['pdn']['pdnUsername']\n        pdnSshPass = BASIC_DATA['pdn']['pdnPassword']\n        nrPort = BASIC_DATA['flow']['nrPort']\n        spanTime = BASIC_DATA['flow']['spanTime']\n        cpePcIp = BASIC_DATA['flow']['cpePcIp']\n        iperfPath = BASIC_DATA['flow']['iperfLocalPath']\n        pdnIp = BASIC_DATA['pdn']['pdnIp']\n        enbDebugIp = BASIC_DATA['gnb']['debugIp']\n        pcIp = BASIC_DATA['flow']['localPcIp']\n        enbId, enbName = key_get_enb_info(hmsObj, serialNumberList)\n        cpe = key_cpe_login(cpeIp,cpeUser,cpePass)\n        pdn = key_pdn_login(pdnSshIp,pdnSshUser,pdnSshPass)\n        ueLogFilePath = ''\n        try:\n            with allure.step(key_get_time() +\": 确认支持PDSCH的调制解调方式,mcs值:\"+str(mcs)+'\\n'):\n                logging.info(key_get_time()+': confirm support PDSCH mcs config, mcs value:'+str(mcs))\n            #修改pdsch调度参数\n>           key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs)\n\n..\\TestCase\\phy\\test_phy.py:210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhmsObj = <BasicModel.hms.hms.HMS object at 0x00000198758AA580>, enbId = 4\nswitch = 'close', mcs = 25\n\n    def key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs=28):\n    \n        with allure.step(key_get_time() +\": 修改PDSCH下行调制解调参数,mcs值:\"+str(mcs)+'\\n'):\n            logging.info(key_get_time()+': modify PDSCH DL mcs, mcs value:'+str(mcs))\n            modifySwitchRes = DLScheduleService().modify_du_dl_amc_switch(hmsObj, enbId, switch)\n            if modifySwitchRes == True:\n                modifyMcsRes = DLScheduleService().modify_du_dl_mcs(hmsObj, enbId, mcs)\n                if modifyMcsRes == True:\n                    with allure.step(key_get_time() +\":PDSCH下行调制解调参数修改成功。\"):\n                        logging.info(key_get_time()+': PDSCH DL mcs modify success!')\n                else:\n                    with allure.step(key_get_time() +\":PDSCH下行调制解调参数修改失败。\"):\n                        logging.warning(key_get_time()+': PDSCH DL mcs modify failure!')\n>           assert modifyMcsRes == True,'修改PDSCH下行调制解调参数修改异常，请检查！'\nE           UnboundLocalError: local variable 'modifyMcsRes' referenced before assignment\n\n..\\UserKeywords\\hms\\PdcchManager.py:84: UnboundLocalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase.phy.test_phy.TestPhy object at 0x00000198757DFD00>\nswitch = 'close', mcs = 25\n\n    @allure.story(\"支持PDSCH_调制解调方式配置\")\n    @pytest.mark.支持PDSCH_调制解调方式配置\n    @pytest.mark.parametrize(\"switch, mcs\",RUN_TESTCASE['支持PDSCH_调制解调方式配置'] if RUN_TESTCASE.get('支持PDSCH_调制解调方式配置') else [])\n    def testModifyPdschMcs(self, switch, mcs):\n        cpeIp = BASIC_DATA['cpe']['cpeSshIp']\n        cpeUser = BASIC_DATA['cpe']['cpeUsername']\n        cpePass = BASIC_DATA['cpe']['cpePassword']\n        serialNumberList=BASIC_DATA['gnb']['serialNumberList']\n        hmsObj = key_login_hms(BASIC_DATA['hms']['ip'])\n        logSavePath = BASIC_DATA['cpe']['ueLogSavePath']\n        ueLogBackup = BASIC_DATA['cpe']['ueLogBackup']\n        pdnSshIp = BASIC_DATA['pdn']['pdnSshIp']\n        pdnSshUser = BASIC_DATA['pdn']['pdnUsername']\n        pdnSshPass = BASIC_DATA['pdn']['pdnPassword']\n        nrPort = BASIC_DATA['flow']['nrPort']\n        spanTime = BASIC_DATA['flow']['spanTime']\n        cpePcIp = BASIC_DATA['flow']['cpePcIp']\n        iperfPath = BASIC_DATA['flow']['iperfLocalPath']\n        pdnIp = BASIC_DATA['pdn']['pdnIp']\n        enbDebugIp = BASIC_DATA['gnb']['debugIp']\n        pcIp = BASIC_DATA['flow']['localPcIp']\n        enbId, enbName = key_get_enb_info(hmsObj, serialNumberList)\n        cpe = key_cpe_login(cpeIp,cpeUser,cpePass)\n        pdn = key_pdn_login(pdnSshIp,pdnSshUser,pdnSshPass)\n        ueLogFilePath = ''\n        try:\n            with allure.step(key_get_time() +\": 确认支持PDSCH的调制解调方式,mcs值:\"+str(mcs)+'\\n'):\n                logging.info(key_get_time()+': confirm support PDSCH mcs config, mcs value:'+str(mcs))\n            #修改pdsch调度参数\n            key_modify_pdsch_dl_mcs(hmsObj, enbId, switch, mcs)\n            #确认小区状态正常\n            key_confirm_cell_status(hmsObj, enbId, 'available')\n            dev_manager, qxdm_window, diagService = key_start_ue_log_trace()\n            #cpe接入小区，确认pdu建立成功\n            key_cpe_attach(cpe)\n            setupRes = key_confirm_pdu_setup_succ(cpe)\n            if setupRes == 'success':\n                key_wait(10)\n                key_dl_udp_nr_flow_test(cpe, pdn, cpePcIp, iperfPath, pdnIp, enbDebugIp, pcIp, monitorPort=nrPort, spanTime=spanTime)\n                ueLogFilePath = key_stop_ue_log_trace(dev_manager, qxdm_window, diagService, logSavePath)\n                mcsRes = key_pdsch_mcs_analyze(ueLogFilePath, mcs)\n            else:\n                logging.info(key_get_time()+': ue attach failure, please check!')\n            assert mcsRes == True, '参数校验失败，请检查！'\n        finally:\n            #cpe去接入小区\n            key_cpe_detach(cpe)\n            logging.info(key_get_time()+': move the log file to backup folder')\n            fileName = ueLogFilePath.split('\\\\')[-1]\n            if os.path.exists(ueLogBackup+'\\\\'+fileName):\n>               os.remove(ueLogFilePath)\nE               FileNotFoundError: [WinError 3] 系统找不到指定的路径。: ''\n\n..\\TestCase\\phy\\test_phy.py:231: FileNotFoundError","steps":[{"name":"2023-01-20 16:47:20: 登录网管\n","time":{"start":1674204440353,"stop":1674204440373,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"2023-01-20 16:47:20: 查询基站信息\n","time":{"start":1674204440373,"stop":1674204440404,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"2023-01-20 16:47:20: 登录CPE前台\n","time":{"start":1674204440405,"stop":1674204440510,"duration":105},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"2023-01-20 16:47:20: 登录pdn服务器: 172.16.2.202","time":{"start":1674204440510,"stop":1674204446922,"duration":6412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"2023-01-20 16:47:26: 确认支持PDSCH的调制解调方式,mcs值:25\n","time":{"start":1674204446922,"stop":1674204446923,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"2023-01-20 16:47:26: 修改PDSCH下行调制解调参数,mcs值:25\n","time":{"start":1674204446923,"stop":1674204478738,"duration":31815},"status":"broken","statusMessage":"UnboundLocalError: local variable 'modifyMcsRes' referenced before assignment\n","statusTrace":"  File \"D:\\autotestPro\\UserKeywords\\hms\\PdcchManager.py\", line 84, in key_modify_pdsch_dl_mcs\n    assert modifyMcsRes == True,'修改PDSCH下行调制解调参数修改异常，请检查！'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0},{"name":"2023-01-20 16:47:58: cpe执行detach命令\n","time":{"start":1674204478785,"stop":1674204482889,"duration":4104},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[{"uid":"e24f62400cbd7ccd","name":"log","source":"e24f62400cbd7ccd.txt","type":"text/plain","size":1401}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":7},"afterStages":[],"labels":[{"name":"story","value":"支持PDSCH_调制解调方式配置"},{"name":"feature","value":"物理层参数测试"},{"name":"tag","value":"支持PDSCH_调制解调方式配置"},{"name":"parentSuite","value":"TestCase.phy"},{"name":"suite","value":"test_phy"},{"name":"subSuite","value":"TestPhy"},{"name":"host","value":"DESKTOP-GH8U6NQ"},{"name":"thread","value":"52804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCase.phy.test_phy"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"mcs","value":"25"},{"name":"switch","value":"'close'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["支持PDSCH_调制解调方式配置"]},"source":"a679aee5f20ec9ff.json","parameterValues":["25","'close'"]}